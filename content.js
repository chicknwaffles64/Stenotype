let observer;
let i = j = 0   //i index used for regular captions, j index used for autogenerated captions
let transcription = "";
let paragraph = ""; //group of 6 lines in order to save computing power on the includes() String method when producing large, autogenerated transcripts

let timer;
let timespan = 0
let t = 0
let averageTimespan = 0; //is not used in this version
let arrayTimespans = []
const len = 50
const percentOfArray = 0.60
let commaLength = 600 // for example, pauselength 2 is twice the timespan of the average
let fullStopLength = 1000
const noSentencePause = 2000

let lastWord = "TRANSCRIPT:"


function getAverage(array) {
    let lowerLimit = parseInt(len*(1 - percentOfArray)/2)
    let upperLimit = parseInt(len*(1-(1-percentOfArray)/2))
    array = array.sort((a, b) => a - b)
    while (array[array.length-1] > noSentencePause) { array.pop() }

    console.log(array)
    
    let sumUpperTimespans = 0
    let upperTimespans = array.slice(upperLimit+2, array.length - 2)
    upperTimespans.forEach((e) => { sumUpperTimespans += e })
    commaLength = sumUpperTimespans / upperTimespans.length
    
    fullStopLength = (array[array.length-1] + array[array.length-2] + array[array.length-3]) / 3

    // array = array.slice(lowerLimit, upperLimit);
    // let sum = 0
    // array.forEach((e) => { sum += e })
    // sum = sum / array.length

    // console.log("comma: " + commaLength + "     period: " + fullStopLength)
    // console.log(sum)
    //return sum;
    return 0;
}

function capitalize(paragraph) {
    paragraph = paragraph.split('. ')
    let capitalized = ""
    paragraph.forEach((sentence) => {
        capitalized += sentence.charAt(0).toUpperCase() + sentence.slice(1, ) + ". "
    })
    return capitalized
}

async function stdCaptions () {
    //escape if no captions on webpage:
    const targetNode = document.getElementById('ytp-caption-window-container');
    const config = { childList: true }
    
    const readCaptions = () => {
        if (document.getElementById(`caption-window-_${i}`) != null) {
            
            document.querySelectorAll(".ytp-caption-segment").forEach((line) => {
                let tempLine = line.textContent + " "
                tempLine = tempLine.replace("\u00A0",' ').replace("  ",' ');
                transcription += tempLine;
                });
            i++;
            console.log(transcription)
        }
    }

    //Reset initial conditions
    i = targetNode.firstChild.id.replace ( /[^\d.]/g, '' );
    transcription = "";

    observer = new MutationObserver(readCaptions);
    observer.observe(targetNode, config);
    console.log(`Started transcribing at timestamp ${document.querySelector('.ytp-time-current').textContent}`);
    readCaptions();
}

async function autoGenCaptions () {
    const targetNode = document.getElementById('ytp-caption-window-container')
    console.log(targetNode)
    
    const config = {
        attributes: true
        //watches for changes in the style of the elements
        //takes advantage of the fact that youtube sets a disappearing style transition on the captions..
        //..whenever a new line is added
    };
    
    const readCaptions = () => {
        if (!targetNode.firstChild) {
            console.log("doesn't exist")
            return
        }
        const target = targetNode.firstChild.firstChild

        let line = target.firstChild.textContent + " "
        if (paragraph.includes(line)) return
        if (j++ === 6) {
            while(toSwapArray.length > 0) {
                paragraph = paragraph.replace(toSwapArrayOriginalLines[i], toSwapArray[i])
                toSwapArray.splice(0, 1)
                toSwapArrayOriginalLines.splice(0, 1)
            }
            
            transcription += capitalize(paragraph);
            paragraph = ""; 
            j = 0;
        }
        paragraph += line
    };
    
    //reset intitial conditions
    j = 0;
    transcription = "";
    paragraph = " ";

    observer = new MutationObserver(readCaptions);
    observer.observe(targetNode, config);
    console.log(`Started transcribing at timestamp ${document.querySelector('.ytp-time-current').textContent} (auto-generated captions)`);

/*NEW */
    timer = new MutationObserver(() => {
        if (!targetNode.firstChild) {
            console.log("doesn't exist")
            return
        }
        const target = targetNode.firstChild.firstChild
        timespan = Date.now() - t
        t = Date.now()
        
        let word = target.lastChild.firstChild.textContent.split(" ").pop()
        if (lastWord.toLowerCase().includes(word.toLowerCase()) || lastWord.includes(" ")) return
        
        /* SPECIAL WORDS*/
        if (lastWord === "i") lastWord = "I"

        /* PUNCTUATION */
        if (timespan > commaLength) {
            if (timespan > fullStopLength) {
                lastWord += "."
                word = word[0].toUpperCase() + word.slice(1,)
            }
            else {
                lastWord += ","
            }
        }

        transcription += lastWord + " "
        console.log(lastWord)
        lastWord = word

         /* Initialize and build data array first */
         if (arrayTimespans.length < len) {
            arrayTimespans.push(timespan)
            if (arrayTimespans.length === len) {
                console.log("getting average")
                averageTimespan = getAverage(arrayTimespans);
                arrayTimespans = []
            }
        }
        return
    });

    const configTimer = {
        childList:true,
        subtree: true,
        attributes: true 
    }
    timer.observe(targetNode, configTimer)
}


chrome.runtime.onMessage.addListener((request) => {
    switch (request.action) {
        
        case "runScript":
            //escape if no captions on webpage / else, start transcribing:
            if (
                document.getElementById('ytp-caption-window-container') !== null && 
                document.getElementById('ytp-caption-window-container').firstChild !== null
            ) {
                if (document.getElementById('caption-window-1') !== null) {
                    autoGenCaptions()
                }
                else { 
                    stdCaptions()
                }
            }
            break;
        
        case "stopScript":
            if (observer) {
                observer.disconnect();
                observer = null; // Clear the observer reference

            if (timer) {
                timer.disconnect();
                timer = null; // Clear the observer reference

                timespan = t = 0
                arrayTimespans = []
                commaLength = 600
                fullStopLength = 1000
                }
                console.log(`Transcription stopped at ${document.querySelector('.ytp-time-current').textContent}`);

                //for autogenerated captions, properly retrieve the last few lines:
                if (document.getElementById('caption-window-1') !== null) {
                    document.querySelectorAll('.ytp-caption-segment').forEach((line) => {
                        if (paragraph.includes(line.textContent)) return
                        paragraph += line.textContent
                    });
                    //transcription += paragraph
                }
            } 
            break;

        case "copy":
            navigator.clipboard.writeText(transcription)
            break;
        
        case "hideCaptions":
            if (document.getElementById('ytp-caption-window-container') === null) return
            const captionbox = document.getElementById('ytp-caption-window-container')
            console.log(captionbox.style.visibility)
            
            if (captionbox.style.visibility === "hidden") {
                captionbox.style = "visibility: visible"
            }
            else { captionbox.style = "visibility: hidden" }
            break;
    }
});

