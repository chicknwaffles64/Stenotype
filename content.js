let observer;
let i = j = 0   //i index used for regular captions, j index used for autogenerated captions
let transcription = "";
let paragraph = ""; //group of 6 lines in order to save computing power on the includes() String method when producing large, autogenerated transcripts

async function stdCaptions () {
    //escape if no captions on webpage:
    const targetNode = document.getElementById('ytp-caption-window-container');
    const config = { childList: true };
    
    const readCaptions = () => {
        if (document.getElementById(`caption-window-_${i}`) != null) {
            
            document.querySelectorAll(".ytp-caption-segment").forEach((line) => {
                let tempLine = line.textContent + " "
                tempLine = tempLine.replace("\u00A0",' ').replace("  ",' ');
                transcription += tempLine;
                });
            i++;
        }
    }

    //Reset initial conditions
    i = targetNode.firstChild.id.replace ( /[^\d.]/g, '' );
    transcription = "";

    observer = new MutationObserver(readCaptions);
    observer.observe(targetNode, config);
    console.log(`Started transcribing at timestamp ${document.querySelector('.ytp-time-current').textContent}`);
    readCaptions();
}

async function autoGenCaptions () {
    const targetNode = document.querySelector('.captions-text');
    
    const config = {
        attributes: true
        //watches for changes in the style of the elements
        //takes advantage of the fact that youtube sets a disappearing style transition on the captions..
        //..whenever a new line is added
    };
    
    const readCaptions = () => {
        let line = targetNode.firstChild.textContent + " "
        if (paragraph.includes(line)) return
        if (++j === 6) {
            transcription += paragraph;
            paragraph = ""; 
            j = 0;
        }
        paragraph += line
    };
    
    //reset intitial conditions
    j = 0;
    transcription = "";
    paragraph = "";

    observer = new MutationObserver(readCaptions);
    observer.observe(targetNode, config);
    console.log(`Started transcribing at timestamp ${document.querySelector('.ytp-time-current').textContent} (auto-generated captions)`);
}


chrome.runtime.onMessage.addListener((request) => {
    switch (request.action) {
        
        case "runScript":
            //escape if no captions on webpage / else, start transcribing:
            if (
                document.getElementById('ytp-caption-window-container') !== null && 
                document.getElementById('ytp-caption-window-container').firstChild !== null
            ) {
                if (document.getElementById('caption-window-1') !== null) {
                    autoGenCaptions()
                }
                else { 
                    stdCaptions()
                }
            }
            break;
        
        case "stopScript":
            if (observer) {
                observer.disconnect();
                observer = null; // Clear the observer reference
                console.log(`Transcription stopped at ${document.querySelector('.ytp-time-current').textContent}`);

                //for autogenerated captions, properly retrieve the last few lines:
                if (document.getElementById('caption-window-1') !== null) {
                    document.querySelectorAll('.ytp-caption-segment').forEach((line) => {
                        if (paragraph.includes(line.textContent)) return
                        paragraph += line.textContent
                    });
                    transcription += paragraph
                }
            } 
            break;

        case "copy":
            navigator.clipboard.writeText(transcription)
            break;
        
        case "hideCaptions":
            if (document.getElementById('ytp-caption-window-container') === null) return
            const captionbox = document.getElementById('ytp-caption-window-container')
            if (!captionbox.checkVisibility()) {
                captionbox.style = "display: visible"
            }
            else { captionbox.style = "display: none" }
            break;
    }
});